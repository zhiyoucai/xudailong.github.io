---
layout: post
title:  "写一个二分查找"
date:   2018-4-8 22:49:57
categories: MySQL
tags: MySQL 入门
excerpt: 二分查找是一个很重要的算法，虽然入门的时候看着没什么卵用，但是学到最后你会发现二分查找。。。
mathjax: true
---

## 二分查找

毕业第一次面试的时候面试官让我讲一个基本的算法，我不假思索的回答了二分查找。

二分查找确实是一种很基本的算法，但是基本不代表用的地方少，想法，二分查找在InnoDB中是有应用的，而且还是比较重要的场合。

上学的时候老师给的例子一般是C语言的数组，而且是有序数组，实际上二分查找只能对有序的序列进行，这一点很重要，因为InnoDB的索引也确实是有序的，似乎很契合二分查找。

给定一个有序的数字队列，例如[1,2,2,3,3,4,4,4,5,7,9,9,10]，设定要寻找的key=9，那么第一步就是寻找这个序列的中值：

* mid = low + (high – low)/2

在这个例子里，套到这个公式里，mid=0+(13-0)/2=6，第7个元素。

这时发现key>mid，可以将队列中low值设置成mid+1，然后继续上面的过程。

这看起来就是个递归，而事实上很多大学里将递归的时候就是用二分查找算法的递归实现来讲的，当然还有汉诺塔问题。

## 实现

```java
import java.util.ArrayList;
import java.util.List;

public class Test {
    private static int binarySearch(List<Integer> list, int key) {
        int low = 0;
        int high = list.size();
        int mid;

        while (high >= low) {
            mid = low + (high - low)/2;
            if (list.get(mid) > key) {
                high = mid - 1;
            } else if (list.get(mid) < key) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(2);
        list.add(3);
        list.add(3);
        list.add(4);
        list.add(4);
        list.add(5);
        list.add(5);
        list.add(7);
        list.add(9);
        list.add(9);
        list.add(10);
        int res = binarySearch(list, 9);
        System.out.println(res);
    }
}

```

这段代码会打印的结果是：10。这正是第一个9出现的位置。注意我没有使用递归，因为程序员都知道递归的效率是很差的，我虽然是个DBA，但是也有好多好多行Java代码的开发经验，这点问题我还是会注意的。

## 为什么一定要讲讲二分查找

留待未来讲到索引的时候再聊这个问题。