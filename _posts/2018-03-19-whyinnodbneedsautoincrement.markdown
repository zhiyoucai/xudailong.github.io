---
layout: post
title:  "为什么InnoDB表一定要有自增主键"
date:   2018-3-19 18:36:35
categories: MySQL
tags: MySQL
excerpt: 一些你应该知道的InnoDB表设计时的小技巧
mathjax: true
---

# InnoDB的数据存储

InnoDB将数据存储在block中，这是InnoDB的最小存储单位。

在此单位之上，衍生出了段，区，表空间三个更大的概念。每一个block是由多个操作系统block组成的。

在操作系统上看，每一个数据库对应了一个目录，如果打开了独立表空间的选项，那么每一个表就对应一个ibd文件（还有一个frm文件保存表结构等信息）。

# 索引组织表

一般的RDBMS表无非两种：索引组织表（IOT）和堆组织表（HOT）。

InnoDB采用索引组织表，可以说InnoDB表就是索引，确切的说是聚簇索引。

下面是一个简单的聚簇索引示意图：

![聚簇索引](https://ws1.sinaimg.cn/large/5fec9ab7ly1fpicanyexoj20ot0d50sz.jpg)

可以看到，IOT实际上使用主键来进行B-Tree的组织，InnoDB在此基础上做出了一些改动，每个叶子节点上，除了存储主键之外，还会把所有的列值存放在其中。

# 页分裂

刚才说过，所有的数据都是存放在block上的，一个block的大小只有16KB。

InnoDB在指定主键的情况下，使用主键组织聚簇索引，如果没有指定主键，则利用第一个唯一键进行组织，如果这些都没有，InnoDB会隐式的生成一个键来组织聚簇索引。

因此，如果使用自增ID当做主键，那么情况类似于上图，所有的叶子都是有序的，每当插入一个新值，只会向最后追加，不会在已有的叶子节点之间插入。而一旦发生B-Tree的重新组织，则有可能将已经存储了数据的block拆分成两个，这样的IO操作是难以接受的。

比如说使用varchar作为主键，主键的顺序应该是1, 10, 2, 20这样的，如果此时插入一个11，则InnoDB会在10和2之间进行插入操作，变成1,10,11,2,20，设想这样一种情况，10和2对应的数据都存放在block-2中，此时11这条数据插入进来，block-2没有足够大的空间，那么该页就会发生分裂，将2对应的数据移走，这就是页分裂。

因此在设计InnoDB表的时候，一定要加上自增主键。

页分裂主要影响插入效率。
